Lesson 4 :- Activity and Fragment Lifecycle
 
problem :- missing data and untimely process shutdown

activity lifecycle states

1.initialized
2.created
3.started
4.resumed
5.destroyed

lifecycle callbacks/methods are called when activity moves from one state to other.

onCreate() is called once the activity is created but not yet visible, and here we do
 one time initializations like layout inflations.


doubt:
when we override lifecycle methods what is the meaning of
    super.onStart()   // why super methods are getting called


As a developer it's your resonsibility to do some cleanup of resources that u are not using when onPause(),
onStop() and onDestroy() gets called. And when onCreate(),onStart(),onPause() gets called you can write code 
to use that resources again.


VVVVVVVVVVVVVVVIIIIIMMMMMPPPPPPPPPP
VIDEO 9  IS VERY IMPORTANT AS SUMMARY

An activity lifecycle is a bunch of different  states that an activity goes through from creation to destruction.
1.initialized
2.created
3.started
4.resumed
5.destroyed
additionally there are corresponding lifecycle methods which are called by the activity when an activity goes
from one lifecycle state to another.Each callback can be overridden to do either a setup or clean up of
resources.
1.onCreate() is for one time initialization , layout inflations'
2.onDestroy() is mirrored method where u tear everything down , at this point u know that your activity is gone forever.
3.onStart() & onStop() :- here ur activity becomes visible and in the foreground.so in 2 to 4 states iactivity is considered as visible.
and in 1 and 6 it is invisible .i.e. in the background.
We can use onStart() & onStop() that should only run when the activity is actually on-screen.
4.onPause() & onResume() :- Here ur activity has focus which means u can actually interact with it.
whatever code written in onPause() blocks other things from displaying so keep callback code light-weight.
5.onRestart() :- Same as onCreate(). But onCreate() is called only once for the first time activity created , after that onRestart() is called.


EXTRAS :
General Definitions
Visible Lifecycle: The part of the Lifecycle between onStart and onStop when the Activity is visible.

Focus: An Activity is said to have focus when it's the activity the user can interact with.

Foreground: When the activity is on screen.

Background: When the activity is fully off screen, it is considered in the background.

Lifecycle States
These are the same for both the Fragment Lifecycle and the Activity Lifecycle.

Initialized: This is the starting state whenever you make a new activity. This is a transient state -- it immediately goes to Created.

Created: Activity has just been created, but it’s not visible and it doesn’t have focus (you’re not able to interact with it).

Started: Activity is visible but doesn’t have focus.

Resumed: The state of the activity when it is running. It’s visible and has focus.

Destroyed: Activity is destroyed. It can be ejected from memory at any point and should not be referenced or interacted with.

Activity Lifecycle Callbacks
onCreate: This is called the first time the activity starts and is therefore only called once during the lifecycle of the activity. It represents when the activity is created and initialized. The activity is not yet visible and you can't interact with it. You must implement onCreate. In onCreate you should:

Inflate the activity's UI, whether that's using findViewById or databinding.
Initialize variables.
Do any other initialization that only happens once during the activity lifetime.
onStart: This is triggered when the activity is about to become visible. It can be called multiple times as the user navigates away from the activity and then back. Examples of the user "navigating away" are when they go to the home screen, or to a new activity in the app. At this point, the activity is not interactive. In onStart you should:

Start any sensors, animations or other procedures that need to start when the activity is visible.
onResume: This is triggered when the activity has focus and the user can interact with it. Here you should:

Start any sensors, animations or other procedures that need to start when the activity has focus (the activity the user is currently interacting with).
onPause: The mirror method to onResume. This method is called as soon as the activity loses focus and the user can't interact with it. An activity can lose focus without fully disappearing from the screen (for example, when a dialog appears that partially obscures the activity). Here you should:

Stop any sensors, animations or other procedures that should not run when the activity doesn't have focus and is partially obscured.
Keep execution fast. The next activity is not shown until this completes.
onStop: This is the mirror method to onStart. It is called when you can no longer see the activity. Here you should:

Stop any sensor, animations or other procedures that should not run when the activity is not on screen.
You can use this to persist (permanently save) data, which you’ll be learning more about in Lesson 6
Stop logic that updates the UI. This should not be running when the activity is off-screen; it's a waste of resources.
There are also restrictions as soon as the app goes into the background, which is when all activities in your app are in the background. We'll talk more about this in Lesson 9.
onDestroy: This is the mirror method to onCreate. It is called once when the activity is fully destroyed. This happens when you navigate back out of the activity (as in press the back button), or manually call finish(). It is your last chance to clean up resources associated with the activity. Here you should:

Tear down or release any resources that are related to the activity and are not automatically released for you. Forgetting to do this could cause a memory leak! Logic that refers to the activity or attempts to update the UI after the activity has been destroyed could crash the app!
Summary of the Fragment Lifecycle
Fragments also have lifecycle states that they go between. The lifecycle states are the same as the activity states. You’ll notice that in your Android Trivia app, you’re using the onCreateView callback - while the fragment lifecycle states are the same, the callbacks are different.

A deep dive into the fragment lifecycle could be a lesson in itself. Here, we’ll just cover the basics with the summary below:

Important Fragment Callbacks to Implement
onCreate: Similar to the Activity’s onCreate callback. This is when the fragment is created. This will only get called once. Here you should:

Initialize anything essential for you fragment.
DO NOT inflate XML, do that in onCreateView, when the system is first drawing the fragment NOT reference the activity, it is still being created. Do this in onActivityCreated.
onCreateView: This is called between onCreate and onActivityCreated. when the system will draw the fragment for the first time when the fragment becomes visible again. You must return a view in this callback if your fragment has a UI. Here you should:

Create your views by inflating your XML.
onStop: Very similar to Activity’s onStop. This callback is called when the user leaves your fragment. Here you should:

Save any permanent fragment state (this will be discussed in lesson 6)
Other callbacks
onAttach: When the fragment is first attached to the activity. This is only called once during the lifecycle of the fragment.

onActivityCreated: Called when the activity onCreate method has returned and the activity has been initialized. If the fragment is added to an activity that's already created, this still gets called. It's purpose is to contain any code the requires the activity exists and it is called multiple times during the lifecycle of the fragment. Here you should:

Execute any code that requires an activity instance
onStart: Called right before the fragment is visible to the user.

onResume: When the activity resumes the fragment. This means the fragment is visible, has focus and is running.

onStop: Called when the Activity’s onStop is called. The fragment no longer has focus.

onDestroyView: Unlike activities, fragment views are destroyed every time they go off screen. This is called after the view is no longer visible.

Do not refer to views in this callback, since they are destroyed
onDestroy: Called when the Activity’s onDestroy is called.

onDetach: Called when the association between the fragment and the activity is destroyed.






video 13  Lifecycle Library:-
Dessert Pusher is very easy + simple app. In future we may create app that will have multiple animations,music players,timers,sensors etc. then
setting them in oncrearte() or onStart()   and   tearing them in  onDestroy() or onStop() will be complex task.and even if u forgot  one you will end up getting bugs in ur app.

So wouldn't it be nice if classes that manages animation,sensors,timers,music could be in-charge of themselves ?
for eg. if our DessertTimer could be in-charge of stoping and starting timer at the correct time .
well in 2017 , Google announced Lifecycle Library , that simplifies working with act. & frag. lifecycle.
Before discovery of lifecycle library , the only way to interact with activity & fragment lifecycle was only through callback methods.



The lifecycle library introduced the Android lifecycle as  an actual object.This new object queried and checked for state.
It also introduced LifecycleOwner interface and LifecycleObeserver interface.
Lifecycle owner - anything that has lifecycle. eg. Activity or fragment.I can take my activity , ask for it's lifecycle object and get information about current state of activity lifecycle.
Lifecycle obeserver - obeserves the life cycle of lifecycleowners  
allows objects to obeserve LifecycleOwners.


video 14 - obeserver pattern  +   exercise
vvvvvvv--iiiiiii--mmmmm--pppppp

video  16,17    -  using ADB tool to kill process
PENDING    PENDING   PENDING

video 17
	 onSaveInstanceState()
it is a safety measure.It occurs after activity is stopped.
it gets called when we put app in background and not when it is actually restarting.
It gets called after onStop() palikade)but after onPause() in API LEVEL more than 28  (my oppo phone is API 25)
It gets called after onStop() in API LEVEL 28 and beyond(29,30...) and  earlier versions than API LEVEL 28 gets called between onStop() and onPause()

Note:-  Note that onSaveInstanceState() is called when your activity goes into the background and NOT when the app process is about to be killed.
because when OS is going to kill process it is already pretty strained out.


video 18  -   configuration change
when u rotate phone it is considered as configuration change,
A configuration change where state of device changes so radically that the system decides that the easiest way to resolve this is to build activity.
It uses onSaveInstanceState()  to restore the activity.
Configuation Change examples :-  
1.Language change - if you change to marathi lang. it might need to accomodate diff text direction.
2.Keyboard change(software) :- it might take extra screen space.
